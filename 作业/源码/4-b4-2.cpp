/* 2452545 计算机 刘晴语 */
#include <iostream>
#include <cstdio>
#include <conio.h>
#include <time.h>
#include <windows.h>
using namespace std;

const int MAX_X = 69;	//定义*组成的边框的宽度
const int MAX_Y = 17;	//定义*组成的边框的高度

/***************************************************************************
  函数名称：cls()
  功    能：完成与system("cls")一样的功能，但效率高
  输入参数：
  返 回 值：
  说    明：清除整个屏幕缓冲区，不仅仅是可见窗口区域(使用当前颜色)
***************************************************************************/
void cls(const HANDLE hout)
{
	COORD coord = { 0, 0 };
	CONSOLE_SCREEN_BUFFER_INFO binfo; /* to get buffer info */
	DWORD num;

	/* 取当前缓冲区信息 */
	GetConsoleScreenBufferInfo(hout, &binfo);
	/* 填充字符 */
	FillConsoleOutputCharacter(hout, (TCHAR)' ', binfo.dwSize.X * binfo.dwSize.Y, coord, &num);
	/* 填充属性 */
	FillConsoleOutputAttribute(hout, binfo.wAttributes, binfo.dwSize.X * binfo.dwSize.Y, coord, &num);

	/* 光标回到(0,0) */
	SetConsoleCursorPosition(hout, coord);
	return;
}

/***************************************************************************
  函数名称：gotoxy
  功    能：将光标移动到指定位置
  输入参数：HANDLE hout ：输出设备句柄
			int X       ：指定位置的x坐标
			int Y       ：指定位置的y坐标
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void gotoxy(const HANDLE hout, const int X, const int Y)
{
	COORD coord;
	coord.X = X;
	coord.Y = Y;
	SetConsoleCursorPosition(hout, coord);
}

/***************************************************************************
  函数名称：showch
  功    能：在指定位置处打印一个指定的字符
  输入参数：HANDLE hout ：输出设备句柄
			int X       ：指定位置的x坐标
			int Y       ：指定位置的y坐标
			char ch     ：要打印的字符
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void showch(const HANDLE hout, const int X, const int Y, const char ch)
{
	gotoxy(hout, X, Y);
	putchar(ch);
}

/***************************************************************************
  函数名称：init_border
  功    能：显示初始的边框及随机字符
  输入参数：HANDLE hout：输出设备句柄
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void init_border(const HANDLE hout)
{
	gotoxy(hout, 0, 0);	//光标移回左上角(0,0)
	cout << "***********************************************************************" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "***********************************************************************" << endl;

	/* 随机显示20个大写字母，字母的值、XY坐标都随机显示
	   rand()函数的功能：随机生成一个在 0-32767 之间的整数
	   思考：在什么情况下，下面这个循环执行生成后，你看到的实际字母个数不足20个？ */
	int i;
	for (i = 0; i < 20; i++)
		showch(hout, rand() % MAX_X + 1, rand() % MAX_Y + 1, 'A' + rand() % 26);

	return;
}

/* -- 按需增加的若干函数可以放在此处 --*/
char menu() {
	cout << "1.用I、J、K、L键控制上下左右(大小写均可，按左箭头光标不允许下移，边界停止)" << endl;
	cout << "2.用I、J、K、L键控制上下左右(大小写均可，按左箭头光标不允许下移，边界回绕)" << endl;
	cout << "3.用箭头键控制上下左右（按大写HPKM不允许移动光标，边界停止）" << endl;
	cout << "4.用箭头键控制上下左右（按大写HPKM不允许移动光标，边界回绕）" << endl;
	cout << "0.退出" << endl;
	cout << "[请选择0-4]";
	char k = _getch();

	return (k);
}
void move_by_ijkl(HANDLE hout, int k) {
	int X = 35, Y = 9, moveto;
	while (1) {
		moveto = _getch();
		if (moveto == 0xE0) { // 检测到特殊字符，可能是方向键
			moveto = _getch(); // 读取第二个字符
				continue; // 忽略左箭头键
			
		}
		
		if (moveto == 'I' || moveto == 'i') {//按I
			if (Y > 1)
				Y--;
			else if (k == '2') {
				Y = 17;
				gotoxy(hout, X, 17);
			}
			gotoxy(hout, X, Y);
		}

		

		else if (moveto == 'K' || moveto == 'k') {//按K
			if (Y < 17)
				Y++;
			else if (k == '2')
				Y = 1;
			gotoxy(hout, X, Y);
		}
		else if (moveto == 'J' || moveto == 'j') {//按J
			if (X > 1)
				X--;
			else if (k == '2')
				X = 69;
			gotoxy(hout, X, Y);
		}
		else if (moveto == 'L' || moveto == 'l') {//按L
			if (X < 69)
				X++;
			else if (k == '2')
				X = 1;
			gotoxy(hout, X, Y);
		}
		if (moveto == ' ') //按空格
			showch(hout, X, Y, ' ');
		if (moveto == 'Q' || moveto == 'q')
			break;
	}
	gotoxy(hout, 0, 23);
	cout << "游戏结束，按回车键返回菜单." << endl;
	while (_getch() != 13)
		;
	cls(hout);
}

void move_by_arrow(HANDLE hout, int k) {
	int X = 35, Y = 9, moveto;
	while (1) {
		moveto = _getch();
		if (moveto == 0xE0 || moveto == 0x00) {
			moveto = _getch();
			if (moveto == 'H') {//按上
				if (Y > 1)
					Y--;
				else if (k == '4') {
					Y = 17;
					gotoxy(hout, X, 17);
				}
				gotoxy(hout, X, Y);
			}
			if (moveto == 'P') {//按下
				if (Y < 17)
					Y++;
				else if (k == '4')
					Y = 1;
				gotoxy(hout, X, Y);
			}
			if (moveto == 'K') {//按左
				if (X > 1)
					X--;
				else if (k == '4')
					X = 68;
				gotoxy(hout, X, Y);
			}
			if (moveto == 'M') {//按右
				if (X < 69)
					X++;
				else if (k == '4')
					X = 1;
				gotoxy(hout, X, Y);
			}
		}
		if (moveto == ' ' && X <= 69) //按空格
			showch(hout, X, Y, ' ');
		if (moveto == 'Q' || moveto == 'q')
			break;
	}
	gotoxy(hout, 0, 23);
	cout << "游戏结束，按回车键返回菜单." << endl;
	while (_getch() != 13)
		;
	cls(hout);
}







int main()
{
	int X = 9, Y = 35;
	const HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE); //取标准输出设备对应的句柄

	/* 生成伪随机数的种子，只需在程序开始时执行一次即可 */
	srand((unsigned int)(time(0)));
	while (1) {//一直执行直到输入正确数字
		char k = menu();
		if (k == '1' || k == '2' || k == '3' || k == '4') {
			/* 此句的作用是调用系统的cls命令清屏 */
			cls(hout);

			/* 显示初始的边框及其中的随机字符 */
			init_border(hout);

			gotoxy(hout, 35, 9);
			if (k == '1' || k == '2')
				move_by_ijkl(hout, k);

			if (k == '3' || k == '4')
				move_by_arrow(hout, k);
		}
		if (k == '0')
			break;
		else
			cls(hout);
	}



	return 0;
}
